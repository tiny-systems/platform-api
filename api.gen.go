// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// NodeStatisticsMap defines model for NodeStatisticsMap.
type NodeStatisticsMap map[string]interface{}

// PortDataWebhookParams defines parameters for PortDataWebhook.
type PortDataWebhookParams struct {
	XTinySystemsPortFullName string  `json:"X-TinySystems-Port-Full-Name"`
	XTinySystemsFlowId       string  `json:"X-TinySystems-Flow-Id"`
	XTinySystemsEdgeId       *string `json:"X-TinySystems-Edge-Id,omitempty"`

	// XTinySystemsError If current data describes an error
	XTinySystemsError *string `json:"X-TinySystems-Error,omitempty"`
}

// PortDataStatisticsParams defines parameters for PortDataStatistics.
type PortDataStatisticsParams struct {
	XTinySystemsNodeName string `json:"X-TinySystems-Node-Name"`
	XTinySystemsFlowId   string `json:"X-TinySystems-Flow-Id"`
}

// PortDataStatisticsJSONRequestBody defines body for PortDataStatistics for application/json ContentType.
type PortDataStatisticsJSONRequestBody = NodeStatisticsMap

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PortDataWebhookWithBody request with any body
	PortDataWebhookWithBody(ctx context.Context, params *PortDataWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PortDataStatisticsWithBody request with any body
	PortDataStatisticsWithBody(ctx context.Context, params *PortDataStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PortDataStatistics(ctx context.Context, params *PortDataStatisticsParams, body PortDataStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PortDataWebhookWithBody(ctx context.Context, params *PortDataWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPortDataWebhookRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PortDataStatisticsWithBody(ctx context.Context, params *PortDataStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPortDataStatisticsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PortDataStatistics(ctx context.Context, params *PortDataStatisticsParams, body PortDataStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPortDataStatisticsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPortDataWebhookRequestWithBody generates requests for PortDataWebhook with any type of body
func NewPortDataWebhookRequestWithBody(server string, params *PortDataWebhookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhook/port-data")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Port-Full-Name", runtime.ParamLocationHeader, params.XTinySystemsPortFullName)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-TinySystems-Port-Full-Name", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Flow-Id", runtime.ParamLocationHeader, params.XTinySystemsFlowId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-TinySystems-Flow-Id", headerParam1)

		if params.XTinySystemsEdgeId != nil {
			var headerParam2 string

			headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Edge-Id", runtime.ParamLocationHeader, *params.XTinySystemsEdgeId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-TinySystems-Edge-Id", headerParam2)
		}

		if params.XTinySystemsError != nil {
			var headerParam3 string

			headerParam3, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Error", runtime.ParamLocationHeader, *params.XTinySystemsError)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-TinySystems-Error", headerParam3)
		}

	}

	return req, nil
}

// NewPortDataStatisticsRequest calls the generic PortDataStatistics builder with application/json body
func NewPortDataStatisticsRequest(server string, params *PortDataStatisticsParams, body PortDataStatisticsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPortDataStatisticsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPortDataStatisticsRequestWithBody generates requests for PortDataStatistics with any type of body
func NewPortDataStatisticsRequestWithBody(server string, params *PortDataStatisticsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhook/statistics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Node-Name", runtime.ParamLocationHeader, params.XTinySystemsNodeName)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-TinySystems-Node-Name", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-TinySystems-Flow-Id", runtime.ParamLocationHeader, params.XTinySystemsFlowId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-TinySystems-Flow-Id", headerParam1)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PortDataWebhookWithBodyWithResponse request with any body
	PortDataWebhookWithBodyWithResponse(ctx context.Context, params *PortDataWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PortDataWebhookResponse, error)

	// PortDataStatisticsWithBodyWithResponse request with any body
	PortDataStatisticsWithBodyWithResponse(ctx context.Context, params *PortDataStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PortDataStatisticsResponse, error)

	PortDataStatisticsWithResponse(ctx context.Context, params *PortDataStatisticsParams, body PortDataStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*PortDataStatisticsResponse, error)
}

type PortDataWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PortDataWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PortDataWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PortDataStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PortDataStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PortDataStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PortDataWebhookWithBodyWithResponse request with arbitrary body returning *PortDataWebhookResponse
func (c *ClientWithResponses) PortDataWebhookWithBodyWithResponse(ctx context.Context, params *PortDataWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PortDataWebhookResponse, error) {
	rsp, err := c.PortDataWebhookWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePortDataWebhookResponse(rsp)
}

// PortDataStatisticsWithBodyWithResponse request with arbitrary body returning *PortDataStatisticsResponse
func (c *ClientWithResponses) PortDataStatisticsWithBodyWithResponse(ctx context.Context, params *PortDataStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PortDataStatisticsResponse, error) {
	rsp, err := c.PortDataStatisticsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePortDataStatisticsResponse(rsp)
}

func (c *ClientWithResponses) PortDataStatisticsWithResponse(ctx context.Context, params *PortDataStatisticsParams, body PortDataStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*PortDataStatisticsResponse, error) {
	rsp, err := c.PortDataStatistics(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePortDataStatisticsResponse(rsp)
}

// ParsePortDataWebhookResponse parses an HTTP response from a PortDataWebhookWithResponse call
func ParsePortDataWebhookResponse(rsp *http.Response) (*PortDataWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PortDataWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePortDataStatisticsResponse parses an HTTP response from a PortDataStatisticsWithResponse call
func ParsePortDataStatisticsResponse(rsp *http.Response) (*PortDataStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PortDataStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /webhook/port-data)
	PortDataWebhook(w http.ResponseWriter, r *http.Request, params PortDataWebhookParams)

	// (POST /webhook/statistics)
	PortDataStatistics(w http.ResponseWriter, r *http.Request, params PortDataStatisticsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PortDataWebhook operation middleware
func (siw *ServerInterfaceWrapper) PortDataWebhook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PortDataWebhookParams

	headers := r.Header

	// ------------- Required header parameter "X-TinySystems-Port-Full-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Port-Full-Name")]; found {
		var XTinySystemsPortFullName string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Port-Full-Name", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Port-Full-Name", runtime.ParamLocationHeader, valueList[0], &XTinySystemsPortFullName)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Port-Full-Name", Err: err})
			return
		}

		params.XTinySystemsPortFullName = XTinySystemsPortFullName

	} else {
		err = fmt.Errorf("Header parameter X-TinySystems-Port-Full-Name is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-TinySystems-Port-Full-Name", Err: err})
		return
	}

	// ------------- Required header parameter "X-TinySystems-Flow-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Flow-Id")]; found {
		var XTinySystemsFlowId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Flow-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Flow-Id", runtime.ParamLocationHeader, valueList[0], &XTinySystemsFlowId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Flow-Id", Err: err})
			return
		}

		params.XTinySystemsFlowId = XTinySystemsFlowId

	} else {
		err = fmt.Errorf("Header parameter X-TinySystems-Flow-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-TinySystems-Flow-Id", Err: err})
		return
	}

	// ------------- Optional header parameter "X-TinySystems-Edge-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Edge-Id")]; found {
		var XTinySystemsEdgeId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Edge-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Edge-Id", runtime.ParamLocationHeader, valueList[0], &XTinySystemsEdgeId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Edge-Id", Err: err})
			return
		}

		params.XTinySystemsEdgeId = &XTinySystemsEdgeId

	}

	// ------------- Optional header parameter "X-TinySystems-Error" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Error")]; found {
		var XTinySystemsError string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Error", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Error", runtime.ParamLocationHeader, valueList[0], &XTinySystemsError)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Error", Err: err})
			return
		}

		params.XTinySystemsError = &XTinySystemsError

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PortDataWebhook(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PortDataStatistics operation middleware
func (siw *ServerInterfaceWrapper) PortDataStatistics(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PortDataStatisticsParams

	headers := r.Header

	// ------------- Required header parameter "X-TinySystems-Node-Name" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Node-Name")]; found {
		var XTinySystemsNodeName string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Node-Name", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Node-Name", runtime.ParamLocationHeader, valueList[0], &XTinySystemsNodeName)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Node-Name", Err: err})
			return
		}

		params.XTinySystemsNodeName = XTinySystemsNodeName

	} else {
		err = fmt.Errorf("Header parameter X-TinySystems-Node-Name is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-TinySystems-Node-Name", Err: err})
		return
	}

	// ------------- Required header parameter "X-TinySystems-Flow-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-TinySystems-Flow-Id")]; found {
		var XTinySystemsFlowId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "X-TinySystems-Flow-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-TinySystems-Flow-Id", runtime.ParamLocationHeader, valueList[0], &XTinySystemsFlowId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "X-TinySystems-Flow-Id", Err: err})
			return
		}

		params.XTinySystemsFlowId = XTinySystemsFlowId

	} else {
		err = fmt.Errorf("Header parameter X-TinySystems-Flow-Id is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "X-TinySystems-Flow-Id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PortDataStatistics(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/webhook/port-data", wrapper.PortDataWebhook).Methods("POST")

	r.HandleFunc(options.BaseURL+"/webhook/statistics", wrapper.PortDataStatistics).Methods("POST")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVQW/bOgz+KwLfO9px3tvNtxZdgRxWFMuADehyUGSmUWtLGkmnMAr/94G2lyzNNmQD",
	"NuxmUJ++TyQ/0s/gYpNiwCAM5TOw22Jjh8+bWOFSrHgW7/iNTRq0VeXFx2DrW4oJSTwquM9AuoRQQlw/",
	"oBPo+wwYXUteuqVyDjC4REtIF61s92J6aT2EYU+yFUnQK4cPm6jQCtmRTyoNJbzH9TbGR3Nxu8jMFe6w",
	"jqnBIBpQFi+10rzzoTPLjgUbno52SDxy/Debz+bQZxATBps8lPBqCGWQrGyH5xZPo1CRIkleWbEaTZHl",
	"9E1v0aHfIRvFGsWaDcXGWCP6DCHrHpE+BhgUyeq1RQUl3EaSKyt2SmrQJ9ugIDGUd8/glX6LthpKFOxQ",
	"sg+5ZjcllytHft3WdX6jxxkQfmo9YQWlUIvZ1Fd99VRiFvLhXvt0lsB1HZ/yRfUbmF9X9zgy/5DpuNiL",
	"jXEtkbZ8qPR4ukY2Nhgkiip3jvgE/b70aswYWS5j1SnCxSAYBgfYlGrvhlYW0QlKzkJom8Mk6dcmUmNF",
	"be6Dpe5g871In73IT/tpRviQ4Endew1wioHHwfp/Pj+15LJ1DpmPhhHKu1UGYu/VWzD5m2GlmL3deT/2",
	"Z/j9ADY6rZqrj+EnzX9YNL/kf91Vf5P1z3bNA2sxv3bLv4QbKOGf4rCYi2krF6cr+RveOQDMI3ZmZ+sW",
	"zbSW/4CNjkHHK/9upZVhpN2X3h4rvVzYZoRCBi3V03+By6Kwyc/UWDxCZz5Cv+o/BwAA//8P51IZzAYA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
